generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  user_id       Int           @id @default(autoincrement())
  first_name    String?
  last_name     String?
  email         String        @unique
  chatHistories ChatHistory[]
  classes       Class[]
  sessions      Session[]
  events        Event[]
  documents     Document[]
  keyConcepts   KeyConcept[]
}

model ChatHistory {
  chat_id      Int           @id @default(autoincrement())
  timestamp    DateTime      @default(now())
  user         User          @relation(fields: [user_id], references: [user_id])
  user_id      Int
  class        Class         @relation(fields: [class_id], references: [class_id])
  class_id     Int
  session      Session?      @relation(fields: [session_id], references: [session_id])
  session_id   String?
  chatMessages ChatMessage[]
}

model ChatMessage {
  message_id  Int         @id @default(autoincrement())
  content     String      @db.Text
  sentByUser  Boolean
  chatHistory ChatHistory @relation(fields: [chat_id], references: [chat_id])
  chat_id     Int
  timestamp   DateTime    @default(now())
}

model Class {
  class_id      Int           @id @default(autoincrement())
  class_name    String
  user          User          @relation(fields: [user_id], references: [user_id])
  user_id       Int
  semester      Semester      @relation(fields: [semester_id], references: [semester_id])
  semester_id   Int           @default(1) // Temporary default value
  chatHistories ChatHistory[]
  sessions      Session[]
  documents     Document[]
  keyConcepts   KeyConcept[]
}

model Semester {
  semester_id   Int      @id @default(autoincrement())
  semester_name String // e.g., "Fall 2024", "Spring 2025"
  start_date    DateTime // Start date of the semester
  end_date      DateTime // End date of the semester
  classes       Class[]
}

model Session {
  session_id    String        @id
  user          User          @relation(fields: [user_id], references: [user_id])
  user_id       Int
  class         Class         @relation(fields: [class_id], references: [class_id])
  class_id      Int
  chatHistories ChatHistory[]
  createdAt     DateTime      @default(now())
  session_title String
  documents     Document[]
  keyConcepts   KeyConcept[]
}

model Event {
  event_id    Int      @id @default(autoincrement())
  title       String
  description String?
  start       DateTime
  end         DateTime
  user        User     @relation(fields: [user_id], references: [user_id])
  user_id     Int
  place       String?
}

model Document {
  document_id String   @id // UUID-based document ID
  url         String
  name        String // Original file name
  user_id     Int
  class_id    Int
  session_id  String // Added session_id field
  user        User     @relation(fields: [user_id], references: [user_id])
  class       Class    @relation(fields: [class_id], references: [class_id])
  session     Session  @relation(fields: [session_id], references: [session_id]) // Added relation to Session
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model KeyConcept {
  concept_id          Int     @id @default(autoincrement())
  description         String
  user_id             Int
  class_id            Int
  session_id          String
  understanding_level Int // (1-5)
  user                User    @relation(fields: [user_id], references: [user_id])
  class               Class   @relation(fields: [class_id], references: [class_id])
  session             Session @relation(fields: [session_id], references: [session_id])
}
